# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-reasoner)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- DeepSeek API Streaming Response Handling:
  - DeepSeek's streaming response is synchronous (not async), so don't use `await` on the stream creation
  - For deepseek-reasoner model, need to handle both `reasoning_content` and `content` in the stream
  - DeepSeek doesn't support temperature parameter when using `deepseek-reasoner` model (though setting it won't cause error)
  - Maximum context length is 64K tokens
  - Maximum output tokens (max_tokens) is 8K for final answer
  - Reasoning chain output can reach up to 32K tokens
  - Unsupported parameters: temperature, top_p, presence_penalty, frequency_penalty, logprobs, top_logprobs
  - Model name must be exactly "deepseek-reasoner" (case sensitive)
  - Requires OpenAI SDK upgrade: `pip3 install -U openai`
  - API base URL: https://api.deepseek.com/v1
  - Features supported: dialogue completion, dialogue prefix continuation (Beta)
  - Features not supported: Function Call, Json Output, FIM completion (Beta)
  - Stream handling pattern:
    ```python
    response = client.chat.completions.create(
        model="deepseek-reasoner",
        messages=messages,
        stream=True
    )
    for chunk in response:  # Use regular for loop, not async for
        if chunk.choices[0].delta.reasoning_content:
            reasoning_content += chunk.choices[0].delta.reasoning_content
        else:
            content += chunk.choices[0].delta.content
    ```
  - For multi-turn conversations:
    - Only append the final content (not reasoning_content) to messages
    - Don't include reasoning_content in messages or it will cause 400 error
    - Example:
      ```python
      messages.append({"role": "assistant", "content": content})  # Only append content, not reasoning_content
      ```

# Scratchpad

## Current Task: Convert Project to Cookiecutter Template

任务说明：将当前项目转换为一个 cookiecutter 模板，支持用户选择创建 cursor 或 windsurf 项目，并进行相应的配置。

主要步骤：
[ ] 1. 创建 cookiecutter.json 配置文件
    - project_type 选择（cursor/windsurf）
    - project_name
    - llm_api_key（可选）
[ ] 2. 设置项目模板结构
    - 根据 project_type 复制对应的规则文件
    - 使用 symbolic link 链接共享的工具和依赖
    - 移除 tests 目录
    - 移除 README.md（由模板生成）
[ ] 3. 创建 hooks 脚本
    - pre_gen_project：验证输入
    - post_gen_project：
        - 设置虚拟环境
        - 处理 symbolic links
[ ] 4. 编写说明文档
    - 生成项目特定的 README.md
    - API key 说明文档

差异分析：
1. Cursor vs Windsurf 主要区别：
   - Cursor: 使用 .cursorrules，支持更多高级功能（如截图验证）
   - Windsurf: 使用 .windsurfrules 和 scratchpad.md，功能相对基础

2. API Key 设计：
   - 完全可选
   - 基础功能无需 API key
   - 提供 API key 后解锁多模态分析等高级功能

3. 共享资源处理：
   - tools/ 目录使用 symbolic link 指向中心位置
   - requirements.txt 也使用 symbolic link
   - 好处：维护方便，一处修改全局生效
   - 注意：需要在 post_gen_project 中正确处理跨平台兼容性
